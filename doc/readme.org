* emacs-tutorial<2019-07-25 周四>
** 安装 emacs26-GUI
*Ubuntu*
源码编译安装(最新版)

系统更新资源：

#+BEGIN_SRC
sudo apt-get update && apt-get upgrade
#+END_SRC

安装源码编译需要的包：

#+BEGIN_SRC
sudo apt-get install build-essential libncurses-dev
#+END_SRC

可以到 EMACS官方下载页面 或 直接使用下面的链接:

#+BEGIN_SRC
$ cd /tmp
$ wget http://mirrors.ustc.edu.cn/gnu/emacs/emacs-26.1.tar.xz
## 解压 xz 文件包
$ tar -xJvf emacs-26.1.tar.xz
$ cd emacs-26.1

#+END_SRC

可以通过 _configure_ 进行配置安装：

    纯命令行：仅用于控制台环境，如果需要GUI界面还要安装其它开发包, --without-x，以及 --with-gnutls=no
    交互界面：默认是会配置所有的交互界面，但需要额外安装相关的软件包。

#+BEGIN_SRC
 ## 默认安装 GUI
 $ ./configure
#+END_SRC

对于在本地操作，一般我选择配置 GUI。如果有报错需要安装包，可以使用 apt search xxx 来搜索名称，然后安装好就可以了。我安装了几个常用的包：

#+BEGIN_SRC
$ sudo apt-get install gnutls-dev libxpm-dev libgif-dev libtiff-dev
#+END_SRC

如果继续报错

#+BEGIN_SRC
... ...
checking for libXaw... configure: error: No X toolkit could be found.
... ...
#+END_SRC

则需要通过安装 gtk 来实现带界面运行

#+BEGIN_SRC
apt search gtk | grep libgtk
libgtk2.0-dev    - development files for the GTK+ library
#+END_SRC


安装这个 gtk 包

#+BEGIN_SRC
$ sudo apt-get install libgtk2.0-dev

#+END_SRC

剩下的就是编译安装了

#+BEGIN_SRC
$ sudo make && make install

#+END_SRC

查看版本号

#+BEGIN_SRC
$ emacs --version
GNU Emacs 26.1
Copyright (C) 2018 Free Software Foundation, Inc.
GNU Emacs comes with ABSOLUTELY NO WARRANTY.
You may redistribute copies of GNU Emacs
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING.
#+END_SRC
当然，也可以在终端启动无界面的操作：

#+BEGIN_SRC
$ emacs -nw
#+END_SRC

** magit
现在来试一试如何用，官方文档在这里：https://magit.vc/manual/magit.html#Top 状态查询
C-x g来查询状态
会打开一个buffer，显示
Head: //指向当前分支的的最近一次提交
Merge: //远程分支的最近一次提交
Untracked files //工作区中有，但没有加入git管理
Unstaged files //git管理的，在工作区已经修改的，但是没有用git add进入staged状态
其实还有其他更多信息：
“Staged changes”, //用git add变成了staged状态
“Unpulled commits”, “Unpushed commits”,
状态信息做的不错，git status输出也有这些信息，不过没有它这么简洁。
查看帮助
在状态buffer中，用C-h m 会打开帮助信息。
删除文件
在shell中用rm命令删除一些文件，然后再查看状态，会看到类似如下信息
Unstaged changes (2) deleted data/dw_product_dt.csv deleted data/dw_product_dt.csv.tgz
这时光标移动到这两个文件，分别按下s，会将这两个文件状态变为staged
Staged changes (2) deleted data/dw_product_dt.csv deleted data/dw_product_dt.csv.tgz
然后继续按c建进入提交界面，按c后会提示输入comments，之后C-c C-c会提交成功。
此时状态buffer会看到一个commit id，回车可以看到里面的详细信息
按P键计入push界面，再按p会直接push到远程分支。
commit
前面已经说过了，这里重复一次
按c，然后再按c，输入comments
C-c C-c提交 push
把untracked文件变为staged 相当于git add命令 按下s即可
** keybindings
| key            | Description                |   |
|----------------+----------------------------+---|
| ~C-x C-+~        | 放大字体                   |   |
| ~C-x C--~        | 缩小字体                   |   |
| ~C-x C-0~        | 还原字体                   |   |
|                |                            |   |
| *magit*          |                            |   |
|                |                            |   |
|----------------+----------------------------+---|
| evil           |                            |   |
| ~C-o~            | 返回                       |   |
| ~g d~            | 查找定义                   |   |
| ~z m~            |                            |   |
| ~z r~            |                            |   |
|----------------+----------------------------+---|
| org            |                            |   |
| ~C-c~            | 创建表格                   |   |
| ~C-c C-c~        | 格式化表格                 |   |
| ~M-S down~       | 下方插入一行表格           |   |
| ~M-S up~         | 上方删除一行表格           |   |
| ~M-S right~      | 右方插入一行表格           |   |
| ~M-S left~       | 左方删除一行表格           |   |
| ~M-S left~       | 左方删除一行表格           |   |
| ~M-up~           | 表格上移                   |   |
| ~M-down~         | 表格下移                   |   |
| ~C-c -~          | 插入水平分割线             |   |
| ~C-c Ret~        | 插入水平分割线并跳到下一行 |   |
| ~C-c C-t~        | 创建TODO                   |   |
| ~S-left~         | 改变TODO状态               |   |
| ~C-c ^~          | 根据当前列排序             |   |
| ~S-M-RET~        | 创建一个目前层级的TODO项   |   |
|----------------+----------------------------+---|
| customized     |                            |   |
|                |                            |   |
| ~C-c y~          | 有道词典                   |   |
| ~SPC h h~        | 帮助系统                   |   |
| visual ~C-c~     | 复制到系统剪切板           |   |
| Insert ~C-v~     | 从系统剪切板粘贴           |   |
| LSP ~C-c i~      | imenu                      |   |
|                |                            |   |
| symbol-overlay |                            |   |
| iedit          |                            |   |
|                |                            |   |
|                |                            |   |

** Tips
表格的自动生成

只要你打一个| 就代表一列，然后按下C-c C-c 或者Ret 或者 TAB，即可自动调整表格
表格内容与表头分界线的生成，输入|-，然后自动生成

~<backtab>~ shift + tab
** 标签
** 字体

*粗体*
#+BEGIN_SRC
*粗体*
#+END_SRC
/斜体/
/asdfd/

+删除线+
#+BEGIN_SRC
+删除线+
#+END_SRC
_下划线_
#+BEGIN_SRC
_下划线_
#+END_SRC
下标： H_2 O
#+BEGIN_SRC
下标： H_2 O
#+END_SRC

上标： E=mc^2
#+BEGIN_SRC
上标： E=mc^2
#+END_SRC

等宽字：  =git=
 或者 ~git~
#+BEGIN_SRC
等宽字：  =git=
 或者 ~git~
#+END_SRC
** Projec
** ❓ 任务
** 超链接

[[https://www.baidu.com]]
#+BEGIN_SRC

[[https://www.baidu.com]]

#+END_SRC
[[www.baidu.com][aa]]
#+BEGIN_SRC
[[www.baidu.com][aa]]
#+END_SRC


[[~/.emacs.d/init.el]]
#+BEGIN_SRC
[[~/.emacs.d/init.el]]
#+END_SRC
** 3
***** 2
<2019-07-29 周一>
*****

** c/c++ ide
*** lsp + ccls
*** counsel-etags + ctags + company-etags
ctags：大多数 Unix 系统都能找到。只支持 C。只有基本的功能；

Exuberant ctags：它支持 C、C++、Java、Fortran、Python、Eiffel、PHP等41种语言，详见这里；
下载Exuberant ctags: http://ctags.sourceforge.net/

Tips:
_emacs自带有ctags，但是没有e参数，需要重新下载Exuberant ctags_

macs company实现补全的候选来源，叫company-backends；是一个emacs变量，可以使用c-h v company-backends查看。
1- 默认的company候选项有很多，有时候发现很多候选项对自己完全不适用，极大干扰了自动补全的效率。
2- 主要的是company-dabbrev，是依赖emacs当前打开的buffer作为自动补全候选项来源。很有作用。
3- 还有company-files，是文件系统的路径。很有作用。
4- company-keywords，是当前文件所属编程语言的语法关键词。
5- company-gtags、company-etags是依据ctags等生成TAGS，去寻找候选项。
6- 其它均可以在文件目录里找到其描述 d:/EDA-tools/emacs/emacs-25.1/.emacs.d/elpa/company-20170715.1035
7- 根据个人实践，去删减，达到优化目的；使得自动补全的候选项都是期望的内容。
如何判断，当前候选项，来自哪个company-backends？
回答：m-x diminish-undo，然后选择company-mode后，mode-line会显示当前补全的候选项来自哪个company-backends。
#+BEGIN_SRC
(defconst shadow/company-global-backends '(
                                          ;; 当前文件所属编程语言的语法关键词
                                          company-keywords
                                          ;; 使用 completion-at-point-functions 的后端
                                          company-capf
                                          ;; 主要用来补全当前 buffer 中出现的 word
                                          company-dabbrev
                                          ;; 使用 yasnippet 补全的后端
                                          company-yasnippet
                                          ;; 补全文件系统的路径后端
                                          company-files
                                          (company-dabbrev-code
                                          company-etags
                                          company-gtags
                                          )))

(setq company-backends shadow/company-global-backends))
#+END_SRC
*** counsel-gtags + company-gtags
https://www.gnu.org/software/global/download.html

** surround

(asdlfkj)
